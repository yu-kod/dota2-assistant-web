import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { Accordion, AccordionDetails, AccordionSummary, Avatar, Chip, CircularProgress, Divider, Grid, Paper, Stack, Typography, } from "@mui/material";
import ExpandMoreIcon from "@mui/icons-material/ExpandMore";
import { HeroPositionsEditor } from "./HeroPositionsEditor";
export function HeroCard({ hero, loading = false, availablePositions, defaultPositions, onPositionsChange, }) {
    return (_jsx(Paper, { elevation: 3, sx: { p: 3 }, children: _jsxs(Stack, { spacing: 3, children: [_jsxs(Stack, { direction: { xs: "column", sm: "row" }, spacing: 3, alignItems: "center", children: [_jsx(Avatar, { variant: "rounded", src: hero.image, alt: hero.localizedName, sx: { width: 160, height: 160, borderRadius: 4 } }), _jsxs(Stack, { spacing: 1, flex: 1, width: "100%", children: [_jsx(Typography, { variant: "h5", children: hero.localizedName }), _jsx(Typography, { variant: "body2", color: "text.secondary", children: hero.roles?.join(", ") ?? "ロール不明" }), _jsxs(Stack, { direction: "row", spacing: 1, flexWrap: "wrap", children: [_jsx(Chip, { label: `属性: ${String(hero.primaryAttr || "不明").toUpperCase()}`, color: "primary" }), _jsx(Chip, { label: `攻撃タイプ: ${String(hero.attackType || "不明")}`, color: "secondary" }), hero.positions?.map((position) => (_jsx(Chip, { label: position, variant: "outlined" }, position))) ?? []] }), _jsx(HeroPositionsEditor, { positions: hero.positions ?? [], defaultPositions: defaultPositions, availablePositions: availablePositions, onChange: onPositionsChange })] })] }), _jsx(Divider, {}), loading ? (_jsx(Stack, { alignItems: "center", py: 4, children: _jsx(CircularProgress, {}) })) : "baseHealth" in hero ? (_jsxs(Grid, { container: true, spacing: 2, children: [_jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "HP", value: hero.baseHealth }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "MP", value: hero.baseMana }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u30A2\u30FC\u30DE\u30FC", value: hero.baseArmor }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u79FB\u52D5\u901F\u5EA6", value: hero.moveSpeed }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u653B\u6483\u529B", value: hero.baseAttackMin != null && hero.baseAttackMax != null
                                    ? `${hero.baseAttackMin} - ${hero.baseAttackMax}`
                                    : undefined }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u653B\u6483\u5C04\u7A0B", value: hero.attackRange }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u7B4B\u529B", value: hero.baseStr }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u654F\u6377", value: hero.baseAgi }) }), _jsx(Grid, { item: true, xs: 6, sm: 3, children: _jsx(Stat, { label: "\u77E5\u529B", value: hero.baseInt }) })] })) : (_jsx(Typography, { variant: "body2", color: "text.secondary", children: "\u8A73\u7D30\u60C5\u5831\u3092\u8AAD\u307F\u8FBC\u307F\u4E2D\u3067\u3059..." })), "description" in hero && hero.description ? (_jsx(Typography, { variant: "body2", color: "text.secondary", children: hero.description })) : null, "abilities" in hero && hero.abilities?.length ? (_jsxs(Stack, { spacing: 1, children: [_jsx(Typography, { variant: "subtitle1", children: "\u30A2\u30D3\u30EA\u30C6\u30A3" }), hero.abilities?.map((ability) => (_jsxs(Accordion, { disableGutters: true, children: [_jsx(AccordionSummary, { expandIcon: _jsx(ExpandMoreIcon, {}), children: _jsx(Typography, { variant: "subtitle2", children: ability.name }) }), _jsxs(AccordionDetails, { children: [_jsx(Typography, { variant: "body2", color: "text.secondary", paragraph: true, children: ability.description }), _jsxs(Stack, { direction: "row", spacing: 2, children: [ability.cooldown?.length ? (_jsx(Stat, { label: "Cooldown", value: ability.cooldown.join(" / ") })) : null, ability.manaCost?.length ? (_jsx(Stat, { label: "Mana", value: ability.manaCost.join(" / ") })) : null] })] })] }, ability.name)))] })) : null, "talents" in hero && hero.talents?.length ? (_jsxs(Stack, { spacing: 1, children: [_jsx(Typography, { variant: "subtitle1", children: "\u30BF\u30EC\u30F3\u30C8" }), _jsx(Stack, { spacing: 1, children: hero.talents?.map((talent) => (_jsx(Chip, { label: talent.name, variant: "outlined" }, talent.name))) })] })) : null] }) }));
}
function Stat({ label, value }) {
    return (_jsxs(Stack, { spacing: 0.5, children: [_jsx(Typography, { variant: "caption", color: "text.secondary", children: label }), _jsx(Typography, { variant: "body1", children: value ?? "-" })] }));
}
